{
    "scope": "source.cfscript - source.sql - text.html.cfm,source.cfscript.embedded.cfml, source.sql source.cfscript",
    "completions":
    [
        // misc completions
        { "trigger": "true", "contents": "true"},
        { "trigger": "false", "contents": "false"},
        { "trigger": "TRUE", "contents": "TRUE"},
        { "trigger": "FALSE", "contents": "FALSE"},
        // functions
        { "trigger": "abs\tCFScript", "contents": "abs(${1:${2:number}})"},
        { "trigger": "aCos\tCFScript", "contents": "aCos(${1:${2:number}})"},
        { "trigger": "arrayAppend\tCFScript", "contents": "arrayAppend(${1:${2:array}, ${3:value}})"},
        { "trigger": "arrayAvg\tCFScript", "contents": "arrayAvg(${1:${2:array}})"},
        { "trigger": "arrayClear\tCFScript", "contents": "arrayClear(${1:${2:array}})"},
        { "trigger": "arrayDeleteAt\tCFScript", "contents": "arrayDeleteAt(${1:${2:array}, ${3:position}})"},
        { "trigger": "arrayInsertAt\tCFScript", "contents": "arrayInsertAt(${1:${2:array}, ${3:position}, ${4:value}})"},
        { "trigger": "arrayIsEmpty\tCFScript", "contents": "arrayIsEmpty(${1:${2:array}})"},
        { "trigger": "arrayLen\tCFScript", "contents": "arrayLen(${1:${2:array}})"},
        { "trigger": "arrayMax\tCFScript", "contents": "arrayMax(${1:${2:array}})"},
        { "trigger": "arrayMin\tCFScript", "contents": "arrayMin(${1:${2:array}})"},
        { "trigger": "arrayNew\tCFScript", "contents": "arrayNew(${1:${2:dimension}})"},
        { "trigger": "arrayPrepend\tCFScript", "contents": "arrayPrepend(${1:${2:array}, ${3:value}})"},
        { "trigger": "arrayResize\tCFScript", "contents": "arrayResize(${1:${2:array}, ${3:size}})"},
        { "trigger": "arraySet\tCFScript", "contents": "arraySet(${1:${2:array}, ${3:start_pos}, ${4:end_pos}, ${5:value}})"},
        { "trigger": "arraySort\tCFScript", "contents": "arraySort(${1:${2:array}, \"${3:sort_type}\"${4:, [sort_order]}})"},
        { "trigger": "arraySum\tCFScript", "contents": "arraySum(${1:${2:array}})"},
        { "trigger": "arraySwap\tCFScript", "contents": "arraySwap(${1:${2:array}, ${3:position1}, ${4:position2}})"},
        { "trigger": "arrayToList\tCFScript", "contents": "arrayToList(${1:${2:array}${3:, [delimiter]}})"},
        { "trigger": "asc\tCFScript", "contents": "asc(${1:\"${2:string}\"})"},
        { "trigger": "aSin\tCFScript", "contents": "aSin(${1:${2:number}})"},
        { "trigger": "atn\tCFScript", "contents": "atn(${1:${2:number}})"},
        { "trigger": "binaryDecode\tCFScript", "contents": "binaryDecode(${1:\"${2:string}\", \"${3:binaryencoding}\"})"},
        { "trigger": "binaryEncode\tCFScript", "contents": "binaryEncode(${1:${2:binarydata}, \"${3:encoding}\"})"},
        { "trigger": "bitAnd\tCFScript", "contents": "bitAnd(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "bitMaskClear\tCFScript", "contents": "bitMaskClear(${1:${2:number}, ${3:start}, ${4:length}})"},
        { "trigger": "bitMaskRead\tCFScript", "contents": "bitMaskRead(${1:${2:number}, ${3:start}, ${4:length}})"},
        { "trigger": "bitMaskSet\tCFScript", "contents": "bitMaskSet(${1:${2:number}, ${3:mask}, ${4:start}, ${5:length}})"},
        { "trigger": "bitNot\tCFScript", "contents": "bitNot(${1:${2:number}})"},
        { "trigger": "bitOr\tCFScript", "contents": "bitOr(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "bitSHLN\tCFScript", "contents": "bitSHLN(${1:${2:number}, ${3:count}})"},
        { "trigger": "bitSHRN\tCFScript", "contents": "bitSHRN(${1:${2:number}, ${3:count}})"},
        { "trigger": "bitXor\tCFScript", "contents": "bitXor(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "ceiling\tCFScript", "contents": "ceiling(${1:${2:number}})"},
        { "trigger": "charsetDecode\tCFScript", "contents": "charsetDecode(${1:\"${2:string}\", \"${3:encoding}\"})"},
        { "trigger": "charsetEncode\tCFScript", "contents": "charsetEncode(${1:${2:binaryobject}, \"${3:encoding}\"})"},
        { "trigger": "chr\tCFScript", "contents": "chr(${1:${2:number}})"},
        { "trigger": "cJustify\tCFScript", "contents": "cJustify(${1:\"${2:string}\", ${3:length}})"},
        { "trigger": "compare\tCFScript", "contents": "compare(${1:\"${2:string1}\", \"${3:string2}\"})"},
        { "trigger": "compareNoCase\tCFScript", "contents": "compareNoCase(${1:\"${2:string1}\", \"${3:string2}\"})"},
        { "trigger": "cos\tCFScript", "contents": "cos(${1:${2:number}})"},
        { "trigger": "createDate\tCFScript", "contents": "createDate(${1:${2:year}, ${3:month}, ${4:day}})"},
        { "trigger": "createDateTime\tCFScript", "contents": "createDateTime(${1:${2:year}, ${3:month}, ${4:day}, ${5:hour}, ${6:minute}, ${7:second}})"},
        { "trigger": "createObject\tCFScript", "contents": "createObject(${1:\"${2:type}\", \"${3:context}\", \"${4:class}\", \"${5:locale}\", \"${6:servername}\", \"${7:component_name}\", \"${8:urltowsdl}\"${9:, [portname]}})"},
        { "trigger": "createODBCDate\tCFScript", "contents": "createODBCDate(${1:${2:date}})"},
        { "trigger": "createODBCDateTime\tCFScript", "contents": "createODBCDateTime(${1:${2:date}})"},
        { "trigger": "createODBCTime\tCFScript", "contents": "createODBCTime(${1:${2:date}})"},
        { "trigger": "createTime\tCFScript", "contents": "createTime(${1:${2:hour}, ${3:minute}, ${4:second}})"},
        { "trigger": "createTimeSpan\tCFScript", "contents": "createTimeSpan(${1:${2:days}, ${3:hours}, ${4:minutes}, ${5:seconds}})"},
        { "trigger": "createUUID\tCFScript", "contents": "createUUID(${1:})"},
        { "trigger": "dateAdd\tCFScript", "contents": "dateAdd(${1:\"${2:datepart}\", ${3:number}, ${4:date}})"},
        { "trigger": "dateCompare\tCFScript", "contents": "dateCompare(${1:${2:date1}, ${3:date2}${4:, [datePart]}})"},
        { "trigger": "dateConvert\tCFScript", "contents": "dateConvert(${1:\"${2:type}\", ${3:date}})"},
        { "trigger": "dateDiff\tCFScript", "contents": "dateDiff(${1:\"${2:datepart}\", ${3:date1}, ${4:date2}})"},
        { "trigger": "dateFormat\tCFScript", "contents": "dateFormat(${1:${2:date}${3:, [mask]}})"},
        { "trigger": "datePart\tCFScript", "contents": "datePart(${1:\"${2:datepart}\", ${3:date}})"},
        { "trigger": "day\tCFScript", "contents": "day(${1:${2:date}})"},
        { "trigger": "dayOfWeek\tCFScript", "contents": "dayOfWeek(${1:${2:date}})"},
        { "trigger": "dayOfWeekAsString\tCFScript", "contents": "dayOfWeekAsString(${1:${2:day_of_week}})"},
        { "trigger": "dayOfYear\tCFScript", "contents": "dayOfYear(${1:${2:date}})"},
        { "trigger": "daysInMonth\tCFScript", "contents": "daysInMonth(${1:${2:date}})"},
        { "trigger": "daysInYear\tCFScript", "contents": "daysInYear(${1:${2:date}})"},
        { "trigger": "de\tCFScript", "contents": "de(${1:\"${2:string}\"})"},
        { "trigger": "decimalFormat\tCFScript", "contents": "decimalFormat(${1:${2:number}})"},
        { "trigger": "decrementValue\tCFScript", "contents": "decrementValue(${1:${2:number}})"},
        { "trigger": "decrypt\tCFScript", "contents": "decrypt(${1:\"${2:encrypted_string}\", \"${3:seed}\"})"},
        { "trigger": "deleteClientVariable\tCFScript", "contents": "deleteClientVariable(${1:\"${2:name}\"})"},
        { "trigger": "deserializeJSON\tCFScript", "contents": "deserializeJSON(${1:string})"},
        { "trigger": "directoryExists\tCFScript", "contents": "directoryExists(${1:\"${2:absolute_path}\"})"},
        { "trigger": "dollarFormat\tCFScript", "contents": "dollarFormat(${1:${2:number}})"},
        { "trigger": "duplicate\tCFScript", "contents": "duplicate(${1:${2:variable}})"},
        { "trigger": "encrypt\tCFScript", "contents": "encrypt(${1:\"${2:string}\", \"${3:key}\"${4:, [algorithm]}${5:, [encoding]}})"},
        { "trigger": "evaluate\tCFScript", "contents": "evaluate(${1:\"${2:expression1}\"${3:, [expression2]}${4:, [expressionN]}})"},
        { "trigger": "exp\tCFScript", "contents": "exp(${1:${2:number}})"},
        { "trigger": "expandPath\tCFScript", "contents": "expandPath(${1:\"${2:relative_path}\"})"},
        { "trigger": "fileExists\tCFScript", "contents": "fileExists(${1:\"${2:path}\"})"},
        { "trigger": "find\tCFScript", "contents": "find(${1:\"${2:substring}\", \"${3:string}\"${4:, [start]}})"},
        { "trigger": "findNoCase\tCFScript", "contents": "findNoCase(${1:\"${2:substring}\", \"${3:string}\"${4:, [start]}})"},
        { "trigger": "findOneOf\tCFScript", "contents": "findOneOf(${1:\"${2:set}\", \"${3:string}\"${4:, [start]}})"},
        { "trigger": "firstDayOfMonth\tCFScript", "contents": "firstDayOfMonth(${1:${2:date}})"},
        { "trigger": "fix\tCFScript", "contents": "fix(${1:${2:number}})"},
        { "trigger": "formatBaseN\tCFScript", "contents": "formatBaseN(${1:${2:number}, ${3:radix}})"},
        { "trigger": "generateSecretKey\tCFScript", "contents": "generateSecretKey(${1:${2:[algorithm]}})"},
        { "trigger": "getAuthUser\tCFScript", "contents": "getAuthUser(${1:})"},
        { "trigger": "getBaseTagData\tCFScript", "contents": "getBaseTagData(${1:\"${2:tagname}\"${3:, [instancenumber]}})"},
        { "trigger": "getBaseTagList\tCFScript", "contents": "getBaseTagList(${1:})"},
        { "trigger": "getBaseTemplatePath\tCFScript", "contents": "getBaseTemplatePath(${1:})"},
        { "trigger": "getClientVariablesList\tCFScript", "contents": "getClientVariablesList(${1:})"},
        { "trigger": "getContextRoot\tCFScript", "contents": "getContextRoot(${1:})"},
        { "trigger": "getCurrentTemplatePath\tCFScript", "contents": "getCurrentTemplatePath(${1:})"},
        { "trigger": "getDirectoryFromPath\tCFScript", "contents": "getDirectoryFromPath(${1:\"${2:path}\"})"},
        { "trigger": "getEncoding\tCFScript", "contents": "getEncoding(${1:\"${2:scope_name}\"})"},
        { "trigger": "getException\tCFScript", "contents": "getException(${1:${2:javaobject}})"},
        { "trigger": "getFileFromPath\tCFScript", "contents": "getFileFromPath(${1:\"${2:path}\"})"},
        { "trigger": "getFunctionList\tCFScript", "contents": "getFunctionList(${1:})"},
        { "trigger": "getGatewayHelper\tCFScript", "contents": "getGatewayHelper(${1:\"${2:gatewayID}\"})"},
        { "trigger": "getHTTPRequestData\tCFScript", "contents": "getHTTPRequestData(${1:})"},
        { "trigger": "getHTTPTimeString\tCFScript", "contents": "getHTTPTimeString(${1:${2:datetime}})"},
        { "trigger": "getK2ServerDocCount\tCFScript", "contents": "getK2ServerDocCount(${1:})"},
        { "trigger": "getK2ServerDocCountLimit\tCFScript", "contents": "getK2ServerDocCountLimit(${1:})"},
        { "trigger": "getLocale\tCFScript", "contents": "getLocale(${1:})"},
        { "trigger": "getLocaleDisplayName\tCFScript", "contents": "getLocaleDisplayName(${1:})"},
        { "trigger": "getMetaData\tCFScript", "contents": "getMetaData(${1:${2:object}})"},
        { "trigger": "getMetricData\tCFScript", "contents": "getMetricData(${1:\"${2:mode}\"})"},
        { "trigger": "getPageContext\tCFScript", "contents": "getPageContext(${1:})"},
        { "trigger": "getProfileSections\tCFScript", "contents": "getProfileSections(${1:\"${2:inifile}\"})"},
        { "trigger": "getProfileString\tCFScript", "contents": "getProfileString(${1:\"${2:inipath}\", \"${3:section}\", \"${4:entry}\"})"},
        { "trigger": "getSOAPRequest\tCFScript", "contents": "getSOAPRequest(${1:})"},
        { "trigger": "getSOAPRequestHeader\tCFScript", "contents": "getSOAPRequestHeader(${1:\"${2:namespace}\", \"${3:name}\"${4:, [asXML]}})"},
        { "trigger": "getSOAPResponse\tCFScript", "contents": "getSOAPResponse(${1:\"${2:webservice}\"})"},
        { "trigger": "getSOAPResponseHeader\tCFScript", "contents": "getSOAPResponseHeader(${1:${2:webservice}, \"${3:namespace}\", \"${4:name}\"${5:, [asXML]}})"},
        { "trigger": "getTempDirectory\tCFScript", "contents": "getTempDirectory(${1:})"},
        { "trigger": "getTempFile\tCFScript", "contents": "getTempFile(${1:\"${2:dir}\", \"${3:prefix}\"})"},
        { "trigger": "getTemplatePath\tCFScript", "contents": "getTemplatePath(${1:})"},
        { "trigger": "getTickCount\tCFScript", "contents": "getTickCount(${1:})"},
        { "trigger": "getTimeZoneInfo\tCFScript", "contents": "getTimeZoneInfo(${1:\"${2:text}\"})"},
        { "trigger": "getToken\tCFScript", "contents": "getToken(${1:\"${2:string}\", ${3:index}${4:, [delimiters]}})"},
        { "trigger": "hash\tCFScript", "contents": "hash(${1:\"${2:string}\"${3:, [algorithm]}${4:, [encoding]}})"},
        { "trigger": "hour\tCFScript", "contents": "hour(${1:${2:date}})"},
        { "trigger": "htmlCodeFormat\tCFScript", "contents": "htmlCodeFormat(${1:\"${2:string}\"${3:, [version]}})"},
        { "trigger": "htmlEditFormat\tCFScript", "contents": "htmlEditFormat(${1:\"${2:string}\"${3:, [version]}})"},
        { "trigger": "iif\tCFScript", "contents": "iif(${1:${2:condition}, \"${3:expression1}\", \"${4:expression2}\"})"},
        { "trigger": "incrementValue\tCFScript", "contents": "incrementValue(${1:${2:number}})"},
        { "trigger": "inputBaseN\tCFScript", "contents": "inputBaseN(${1:\"${2:string}\", \"${3:radix}\"})"},
        { "trigger": "insert\tCFScript", "contents": "insert(${1:\"${2:substring}\", \"${3:string}\", ${4:position}})"},
        { "trigger": "int\tCFScript", "contents": "int(${1:${2:number}})"},
        { "trigger": "isArray\tCFScript", "contents": "isArray(${1:${2:value}${3:, [number]}})"},
        { "trigger": "isBinary\tCFScript", "contents": "isBinary(${1:${2:value}})"},
        { "trigger": "isBoolean\tCFScript", "contents": "isBoolean(${1:${2:value}})"},
        { "trigger": "isCustomFunction\tCFScript", "contents": "isCustomFunction(${1:${2:object}})"},
        { "trigger": "isDate\tCFScript", "contents": "isDate(${1:${2:object}})"},
        { "trigger": "isDebugMode\tCFScript", "contents": "isDebugMode(${1:})"},
        { "trigger": "isDefined\tCFScript", "contents": "isDefined(${1:\"${2:variable_name}\"})"},
        { "trigger": "isK2ServerABroker\tCFScript", "contents": "isK2ServerABroker(${1:})"},
        { "trigger": "isK2ServerDocCountExceeded\tCFScript", "contents": "isK2ServerDocCountExceeded(${1:})"},
        { "trigger": "isK2ServerOnline\tCFScript", "contents": "isK2ServerOnline(${1:})"},
        { "trigger": "isLeapYear\tCFScript", "contents": "isLeapYear(${1:${2:year}})"},
        { "trigger": "isNumeric\tCFScript", "contents": "isNumeric(${1:\"${2:string}\"})"},
        { "trigger": "isNumericDate\tCFScript", "contents": "isNumericDate(${1:${2:number}})"},
        { "trigger": "isObject\tCFScript", "contents": "isObject(${1:${2:value}})"},
        { "trigger": "isQuery\tCFScript", "contents": "isQuery(${1:\"${2:value}\"})"},
        { "trigger": "isSimpleValue\tCFScript", "contents": "isSimpleValue(${1:${2:value}})"},
        { "trigger": "isSOAPRequest\tCFScript", "contents": "isSOAPRequest(${1:})"},
        { "trigger": "isStruct\tCFScript", "contents": "isStruct(${1:${2:variable}})"},
        { "trigger": "isUserInRole\tCFScript", "contents": "isUserInRole(${1:\"${2:role_name}\"})"},
        { "trigger": "isValid\tCFScript", "contents": "isValid(${1:\"${2:type}\", ${3:value}, ${4:min}, ${5:max}, \"${6:pattern}\"})"},
        { "trigger": "isWDDX\tCFScript", "contents": "isWDDX(${1:${2:value}})"},
        { "trigger": "isXML\tCFScript", "contents": "isXML(${1:\"${2:value}\"})"},
        { "trigger": "isXMLAttribute\tCFScript", "contents": "isXMLAttribute(${1:${2:value}})"},
        { "trigger": "isXMLDoc\tCFScript", "contents": "isXMLDoc(${1:${2:value}})"},
        { "trigger": "isXMLElem\tCFScript", "contents": "isXMLElem(${1:${2:value}})"},
        { "trigger": "isXMLNode\tCFScript", "contents": "isXMLNode(${1:${2:value}})"},
        { "trigger": "isXMLRoot\tCFScript", "contents": "isXMLRoot(${1:${2:value}})"},
        { "trigger": "javaCast\tCFScript", "contents": "javaCast(${1:\"${2:type}\", \"${3:variable}\"})"},
        { "trigger": "JSStringFormat\tCFScript", "contents": "JSStringFormat(${1:\"${2:string}\"})"},
        { "trigger": "lCase\tCFScript", "contents": "lCase(${1:\"${2:string}\"})"},
        { "trigger": "left\tCFScript", "contents": "left(${1:\"${2:string}\", ${3:count}})"},
        { "trigger": "len\tCFScript", "contents": "len(${1:${2:object}})"},
        { "trigger": "listAppend\tCFScript", "contents": "listAppend(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listChangeDelims\tCFScript", "contents": "listChangeDelims(${1:\"${2:list}\", \"${3:new_delimiter}\"${4:, [delimiters]}})"},
        { "trigger": "listContains\tCFScript", "contents": "listContains(${1:\"${2:list}\", \"${3:substring}\"${4:, [delimiters]}})"},
        { "trigger": "listContainsNoCase\tCFScript", "contents": "listContainsNoCase(${1:\"${2:list}\", \"${3:substring}\"${4:, [delimiters]}})"},
        { "trigger": "listDeleteAt\tCFScript", "contents": "listDeleteAt(${1:\"${2:list}\", ${3:position}${4:, [delimiters]}})"},
        { "trigger": "listFind\tCFScript", "contents": "listFind(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listFindNoCase\tCFScript", "contents": "listFindNoCase(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listFirst\tCFScript", "contents": "listFirst(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listGetAt\tCFScript", "contents": "listGetAt(${1:\"${2:list}\", ${3:position}${4:, [delimiters]}})"},
        { "trigger": "listInsertAt\tCFScript", "contents": "listInsertAt(${1:\"${2:list}\", ${3:position}, \"${4:value}\"${5:, [delimiters]}})"},
        { "trigger": "listLast\tCFScript", "contents": "listLast(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listLen\tCFScript", "contents": "listLen(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listPrepend\tCFScript", "contents": "listPrepend(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listQualify\tCFScript", "contents": "listQualify(${1:\"${2:list}\", \"${3:qualifier}\"${4:, [delimiters]}${5:, [elements]}})"},
        { "trigger": "listRest\tCFScript", "contents": "listRest(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listSetAt\tCFScript", "contents": "listSetAt(${1:\"${2:list}\", ${3:position}, \"${4:value}\"${5:, [delimiters]}})"},
        { "trigger": "listSort\tCFScript", "contents": "listSort(${1:\"${2:list}\", \"${3:sort_type}\"${4:, [sort_order]}${5:, [delimiters]}})"},
        { "trigger": "listToArray\tCFScript", "contents": "listToArray(${1:\"${2:list}\"${3:, [delimiters]}})"},
        { "trigger": "listValueCount\tCFScript", "contents": "listValueCount(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "listValueCountNoCase\tCFScript", "contents": "listValueCountNoCase(${1:\"${2:list}\", \"${3:value}\"${4:, [delimiters]}})"},
        { "trigger": "lJustify\tCFScript", "contents": "lJustify(${1:\"${2:string}\", ${3:length}})"},
        { "trigger": "log\tCFScript", "contents": "log(${1:${2:number}})"},
        { "trigger": "log10\tCFScript", "contents": "log10(${1:${2:number}})"},
        { "trigger": "LSCurrencyFormat\tCFScript", "contents": "LSCurrencyFormat(${1:${2:number}${3:, [type]}})"},
        { "trigger": "LSDateFormat\tCFScript", "contents": "LSDateFormat(${1:${2:date}${3:, [mask]}})"},
        { "trigger": "LSEuroCurrencyFormat\tCFScript", "contents": "LSEuroCurrencyFormat(${1:\"${2:currency}\", \"${3:type}\"})"},
        { "trigger": "LSIsCurrency\tCFScript", "contents": "LSIsCurrency(${1:\"${2:string}\"})"},
        { "trigger": "LSIsDate\tCFScript", "contents": "LSIsDate(${1:\"${2:string}\"})"},
        { "trigger": "LSIsNumeric\tCFScript", "contents": "LSIsNumeric(${1:\"${2:string}\"})"},
        { "trigger": "LSNumberFormat\tCFScript", "contents": "LSNumberFormat(${1:${2:number}${3:, [mask]}})"},
        { "trigger": "LSParseCurrency\tCFScript", "contents": "LSParseCurrency(${1:\"${2:string}\"})"},
        { "trigger": "LSParseDateTime\tCFScript", "contents": "LSParseDateTime(${1:\"${2:dt_string}\"})"},
        { "trigger": "LSParseEuroCurrency\tCFScript", "contents": "LSParseEuroCurrency(${1:\"${2:currency_string}\"})"},
        { "trigger": "LSParseNumber\tCFScript", "contents": "LSParseNumber(${1:\"${2:string}\"})"},
        { "trigger": "LSTimeFormat\tCFScript", "contents": "LSTimeFormat(${1:${2:time}${3:, [mask]}})"},
        { "trigger": "lTrim\tCFScript", "contents": "lTrim(${1:\"${2:string}\"})"},
        { "trigger": "max\tCFScript", "contents": "max(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "mid\tCFScript", "contents": "mid(${1:\"${2:string}\", ${3:start}, ${4:count}})"},
        { "trigger": "min\tCFScript", "contents": "min(${1:${2:number1}, ${3:number2}})"},
        { "trigger": "minute\tCFScript", "contents": "minute(${1:${2:date}})"},
        { "trigger": "month\tCFScript", "contents": "month(${1:${2:date}})"},
        { "trigger": "monthAsString\tCFScript", "contents": "monthAsString(${1:${2:month_number}})"},
        { "trigger": "now\tCFScript", "contents": "now(${1:})"},
        { "trigger": "numberFormat\tCFScript", "contents": "numberFormat(${1:${2:number}${3:, [mask]}})"},
        { "trigger": "paragraphFormat\tCFScript", "contents": "paragraphFormat(${1:\"${2:string}\"})"},
        { "trigger": "parseDateTime\tCFScript", "contents": "parseDateTime(${1:\"${2:dt_string}\"${3:, [pop_conversion]}})"},
        { "trigger": "pi\tCFScript", "contents": "pi(${1:})"},
        { "trigger": "preserveSingleQuotes\tCFScript", "contents": "preserveSingleQuotes(${1:\"${2:variable}\"})"},
        { "trigger": "quarter\tCFScript", "contents": "quarter(${1:${2:date}})"},
        { "trigger": "queryAddColumn\tCFScript", "contents": "queryAddColumn(${1:${2:query}, \"${3:column-name}\"${4:, [datatype]}, ${5:array-name}})"},
        { "trigger": "queryAddRow\tCFScript", "contents": "queryAddRow(${1:${2:query}${3:, [number]}})"},
        { "trigger": "queryNew\tCFScript", "contents": "queryNew(${1:\"${2:columnlist}\"${3:, [columntypelist]}})"},
        { "trigger": "querySetCell\tCFScript", "contents": "querySetCell(${1:${2:query}, \"${3:column_name}\", ${4:value}${5:, [row_number]}})"},
        { "trigger": "quotedValueList\tCFScript", "contents": "quotedValueList(${1:${2:column}${3:, [delimiter]}})"},
        { "trigger": "rand\tCFScript", "contents": "rand(${1:${2:[algorithm]}})"},
        { "trigger": "randomize\tCFScript", "contents": "randomize(${1:${2:number}${3:, [algorithm]}})"},
        { "trigger": "randRange\tCFScript", "contents": "randRange(${1:${2:number1}, ${3:number2}${4:, [algorithm]}})"},
        { "trigger": "reFind\tCFScript", "contents": "reFind(${1:${2:reg_expression}, \"${3:string}\"${4:, [start]}${5:, [returnsubexpressions]}})"},
        { "trigger": "reFindNoCase\tCFScript", "contents": "reFindNoCase(${1:${2:reg_expression}, \"${3:string}\"${4:, [start]}${5:, [returnsubexpressions]}})"},
        { "trigger": "releaseComObject\tCFScript", "contents": "releaseComObject(${1:${2:objectName}})"},
        { "trigger": "removeChars\tCFScript", "contents": "removeChars(${1:\"${2:string}\", ${3:start}, ${4:count}})"},
        { "trigger": "repeatString\tCFScript", "contents": "repeatString(${1:\"${2:string}\", ${3:count}})"},
        { "trigger": "replace\tCFScript", "contents": "replace(${1:\"${2:string}\", \"${3:substring1}\", \"${4:substring2}\"${5:, [scope]}})"},
        { "trigger": "replaceList\tCFScript", "contents": "replaceList(${1:\"${2:string}\", \"${3:list1}\", \"${4:list2}\"})"},
        { "trigger": "replaceNoCase\tCFScript", "contents": "replaceNoCase(${1:\"${2:string}\", \"${3:substring1}\", \"${4:substring2}\"${5:, [scope]}})"},
        { "trigger": "reReplace\tCFScript", "contents": "reReplace(${1:\"${2:string}\", ${3:reg_expression}, \"${4:substring}\"${5:, [scope]}})"},
        { "trigger": "reReplaceNoCase\tCFScript", "contents": "reReplaceNoCase(${1:\"${2:string}\", ${3:reg_expression}, \"${4:substring}\"${5:, [scope]}})"},
        { "trigger": "reverse\tCFScript", "contents": "reverse(${1:\"${2:string}\"})"},
        { "trigger": "right\tCFScript", "contents": "right(${1:\"${2:string}\", ${3:count}})"},
        { "trigger": "rJustify\tCFScript", "contents": "rJustify(${1:\"${2:string}\", ${3:length}})"},
        { "trigger": "round\tCFScript", "contents": "round(${1:${2:number}})"},
        { "trigger": "rTrim\tCFScript", "contents": "rTrim(${1:\"${2:string}\"})"},
        { "trigger": "second\tCFScript", "contents": "second(${1:${2:date}})"},
        { "trigger": "sendGatewayMessage\tCFScript", "contents": "sendGatewayMessage(${1:\"${2:gatewayID}\", ${3:data}})"},
        { "trigger": "serialize\tCFScript", "contents": "serialize(${1:variable_name})"},
        { "trigger": "serializeJSON\tCFScript", "contents": "serializeJSON(${1:variable_name})"},
        { "trigger": "setEncoding\tCFScript", "contents": "setEncoding(${1:\"${2:scope_name}\", \"${3:charset}\"})"},
        { "trigger": "setLocale\tCFScript", "contents": "setLocale(${1:\"${2:new_locale}\"})"},
        { "trigger": "setProfileString\tCFScript", "contents": "setProfileString(${1:\"${2:inipath}\", \"${3:section}\", \"${4:entry}\", \"${5:value}\"})"},
        { "trigger": "setVariable\tCFScript", "contents": "setVariable(${1:\"${2:name}\", \"${3:value}\"})"},
        { "trigger": "sgn\tCFScript", "contents": "sgn(${1:${2:number}})"},
        { "trigger": "sin\tCFScript", "contents": "sin(${1:${2:number}})"},
        { "trigger": "spanExcluding\tCFScript", "contents": "spanExcluding(${1:\"${2:string}\", \"${3:set}\"})"},
        { "trigger": "spanIncluding\tCFScript", "contents": "spanIncluding(${1:\"${2:string}\", \"${3:set}\"})"},
        { "trigger": "sqr\tCFScript", "contents": "sqr(${1:${2:number}})"},
        { "trigger": "stripCR\tCFScript", "contents": "stripCR(${1:\"${2:string}\"})"},
        { "trigger": "structAppend\tCFScript", "contents": "structAppend(${1:${2:struct1}, ${3:struct2}${4:, [overwriteFlag]}})"},
        { "trigger": "structClear\tCFScript", "contents": "structClear(${1:${2:structure}})"},
        { "trigger": "structCopy\tCFScript", "contents": "structCopy(${1:${2:structure}})"},
        { "trigger": "structCount\tCFScript", "contents": "structCount(${1:${2:structure}})"},
        { "trigger": "structDelete\tCFScript", "contents": "structDelete(${1:\"${2:structure}\", \"${3:key}\"${4:, [indicatenotexisting]}})"},
        { "trigger": "structFind\tCFScript", "contents": "structFind(${1:${2:structure}, \"${3:key}\"})"},
        { "trigger": "structFindKey\tCFScript", "contents": "structFindKey(${1:${2:top}, \"${3:value}\", \"${4:scope}\"})"},
        { "trigger": "structFindValue\tCFScript", "contents": "structFindValue(${1:${2:top}, \"${3:value}\"${4:, [scop]}})"},
        { "trigger": "structGet\tCFScript", "contents": "structGet(${1:\"${2:pathdesired}\"})"},
        { "trigger": "structInsert\tCFScript", "contents": "structInsert(${1:${2:structure}, \"${3:key}\", ${4:value}${5:, [allowoverwrite]}})"},
        { "trigger": "structIsEmpty\tCFScript", "contents": "structIsEmpty(${1:${2:structure}})"},
        { "trigger": "structKeyArray\tCFScript", "contents": "structKeyArray(${1:${2:structure}})"},
        { "trigger": "structKeyExists\tCFScript", "contents": "structKeyExists(${1:${2:structure}, \"${3:key}\"})"},
        { "trigger": "structKeyList\tCFScript", "contents": "structKeyList(${1:${2:structure}${3:, [delimiter]}})"},
        { "trigger": "structNew\tCFScript", "contents": "structNew(${1:})"},
        { "trigger": "structSort\tCFScript", "contents": "structSort(${1:${2:base}, \"${3:sorttype}\", \"${4:sortorder}\", \"${5:pathtosubelement}\"})"},
        { "trigger": "structUpdate\tCFScript", "contents": "structUpdate(${1:${2:structure}, \"${3:key}\", ${4:value}})"},
        { "trigger": "tan\tCFScript", "contents": "tan(${1:${2:number}})"},
        { "trigger": "timeFormat\tCFScript", "contents": "timeFormat(${1:${2:time}${3:, [mask]}})"},
        { "trigger": "toBase64\tCFScript", "contents": "toBase64(${1:${2:string_or_object}${3:, [encoding]}})"},
        { "trigger": "toBinary\tCFScript", "contents": "toBinary(${1:${2:base64_or_object}})"},
        { "trigger": "toScript\tCFScript", "contents": "toScript(${1:${2:cfvar}, \"${3:javascriptvar}\"${4:, [outputformat]}${5:, [ASFormat]}})"},
        { "trigger": "toString\tCFScript", "contents": "toString(${1:${2:any_value}${3:, [encoding]}})"},
        { "trigger": "trim\tCFScript", "contents": "trim(${1:\"${2:string}\"})"},
        { "trigger": "uCase\tCFScript", "contents": "uCase(${1:\"${2:string}\"})"},
        { "trigger": "urlDecode\tCFScript", "contents": "urlDecode(${1:\"${2:urlencodedstring}\"${3:, [charset]}})"},
        { "trigger": "urlEncodedFormat\tCFScript", "contents": "urlEncodedFormat(${1:\"${2:string}\"${3:, [charset]}})"},
        { "trigger": "urlSessionFormat\tCFScript", "contents": "urlSessionFormat(${1:${2:requesturl}})"},
        { "trigger": "val\tCFScript", "contents": "val(${1:\"${2:string}\"})"},
        { "trigger": "valueList\tCFScript", "contents": "valueList(${1:${2:column}${3:, [delimiter]}})"},
        { "trigger": "week\tCFScript", "contents": "week(${1:${2:date}})"},
        { "trigger": "wrap\tCFScript", "contents": "wrap(${1:\"${2:string}\", ${3:limit}${4:, [strip]}})"},
        { "trigger": "writeOutput\tCFScript", "contents": "writeOutput(${1:\"${2:string}\"})"},
        { "trigger": "xmlChildPos\tCFScript", "contents": "xmlChildPos(${1:${2:elem}, \"${3:childname}\", ${4:n}})"},
        { "trigger": "xmlElemNew\tCFScript", "contents": "xmlElemNew(${1:${2:xmlobj}${3:, [namespace]}, \"${4:childname}\"})"},
        { "trigger": "xmlFormat\tCFScript", "contents": "xmlFormat(${1:\"${2:string}\"})"},
        { "trigger": "xmlGetNodeType\tCFScript", "contents": "xmlGetNodeType(${1:${2:xmlNode}})"},
        { "trigger": "xmlNew\tCFScript", "contents": "xmlNew(${1:${2:[casesensitive]}})"},
        { "trigger": "xmlParse\tCFScript", "contents": "xmlParse(${1:\"${2:xmlstring}\"${3:, [casesensitive]}${4:, [validator]}})"},
        { "trigger": "xmlSearch\tCFScript", "contents": "xmlSearch(${1:${2:xmldoc}, \"${3:xpathstring}\"})"},
        { "trigger": "xmlTransform\tCFScript", "contents": "xmlTransform(${1:\"${2:xml}\", \"${3:xsl}\"${4:, [parameters]}})"},
        { "trigger": "xmlValidate\tCFScript", "contents": "xmlValidate(${1:${2:xmlDoc}${3:, [validator]}})"},
        { "trigger": "year\tCFScript", "contents": "year(${1:${2:date}})"},
        { "trigger": "yesNoFormat\tCFScript", "contents": "yesNoFormat(${1:${2:value}})"},
        //Other constructs
        { "trigger": "for-in-loop\tCFScript", "contents": "for(${1:item} in ${2:collection}) {\n   ${3:code};\n}"}

    ]
}
